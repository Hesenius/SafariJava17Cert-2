A) Which are valid?
class X {
  var x = 99;
}
B) void doStuff(var x) { }
C)
void doStuff() {
  var x;
  x = 100;
}
D)
void doStuff() {
  var x = 100;
}
E)
void doStuff() {
  var x = { 1, 2, 3 };
}

Q) Which are legal
   A) for (var x = 0; x < 3; x++)
       System.out.println(x);

   B)
     try (var in = new FileReader("");
          var out = new FileWriter("")) {
     }

   C)
     try (FileReader in = new FileReader("")) {
     } catch (var ex) {
     }

   D) var var = "var";

   E) var v = null;

Q) Given:

       String message = """Hello\
       Java 17 World!""";
       System.out.println(message + "XXX");

   What is the result?
   A) Compilation fails
   B) Exception at runtime
   C) Hello
      Java 17 World!XXX
   D) Hello Java 17 World!XXX
   E) Hello Java 17 World!
      XXX

Q) Given:
    String message = """
        Hello
            Java 17 World!""";
    System.out.println(message + "XXX");
What is the result?
A)
Hello
Java 17 World!XXX
B)
Hello
    Java 17 World!XXX
C)
Hello
Java 17 World!
XXX
D)
    Hello
        Java 17 World!
XXX

Q)   Which print "true"
A) String s = "Hello";
   String t = "He";
   t += "llo";
   sout(s == t);
B) String s = "Hello";
   String t = "He";
   t += "llo";
   sout(s.equals(t));
C) StringBuilder s = new StringBuilder("Hello");
   StringBuilder t = new StringBuilder("He");
   t.append("llo");
   sout(s.equals(t));
D) List<String> ls = List.of("Fred", "Jim");
   List<String> ls2 = new ArrayList<>(ls);
   sout(ls.equals(ls2));
E) LocalDate ld = LocalDate.of(2021, 3, 29);
   LocalDate ld2 = LocalDate.of(2021, 3, 29);
   sout(ld.equals(ld2));

Q) Which are true?
in another jarfile:
class X {
  static String h = "Hello";
}
and:
String s1 = "Hello";
String s2 = new StringBuilder("Hello").toString();
String s3 = s2.intern();
A) s1 == s2
B) s2 == s3
C) s1 == s3
D) X.h == s1
E) None of the above

Q) Given:
public static void main(String[] args) {
  int x = -1;
  System.out.println(x & 5);
}

What is the result?
A) Compilation fails
B) Exception at runtime
C) -1
D) 0x00000005
E) 5

Q) Given:
  public static boolean v1() {
    return true;
  }
  public static boolean v2() {
    throw new RuntimeException();
  }
and:
System.out.println(v1() || v2());

What is the result:
A) Compilation fails
B) Exception
C) true
D) false
E) true, followed byan exception

Q) Given
class Thing {
  int x = 99;

  static void showIt() {
    int x = 98;
    System.out.println("x is " + x);
  }
}

What is the effect of:
Thing.showIt();

A) Compilation fails
B) Exception
C) 99
D) 98

Q) Given:
class Base {
  void doBaseStuff() { System.out.println("doBaseStuff"); }
}
class Sub extends Base {
  void doBaseStuff() { System.out.println("doSubStuff"); }
  void doOtherStuff() { System.out.println("doOtherStuff"); }
}
and:
Base b = new Sub();
((Runnable) b).run();

What is the result?
A) doSubStuff
B) doOtherStuff
C) doBaseStuff
D) Exception at runtime
E) Compilation failure

Q) Given:
    Object obj = "Hello";
    if (obj instanceof String) {
      String str = (String)obj;
      if (str.length() > 3) {
        System.out.println(str);
      } else {
        System.out.println("Too short");
      }
    }
Which replace the if clause to produce the same output?
A)    System.out.println(obj instanceof String str && str.length() > 3 ? str : "Too short");
B)    if (obj instanceof String str when str.length() > 3)
        System.out.println(str);
      else
        System.out.println("Too short");
C)    if (obj instanceof String str if str.length() > 3)
        System.out.println(str);
      else
        System.out.println("Too short");
D)    System.out.println(obj instanceof String.class str && str.length() > 3 ? str : "Too short");
E)    if (obj instanceof String str && str.length() > 3)
        System.out.println(str);
      else
        System.out.println("Too short");

Q) Given:
String s = "Hello";
switch (s) {
  case "Hello" ->
      System.out.print("Bonjour "); // line n1
      System.out.print("Guten Tag ");
  default -> System.out.print("Bye");
}

Which is true?
A) The code prints: Bonjour Guten Tag Bye
B) The code prints: Bonjour Guten Tag
C) If line n1 is removed the code prints: Guten Tag Bye
D) If line n1 is removed the code prints: Guten Tag
E) The code fails to compile

Q)Given
short s = 8;
System.out.println(switch (s) { // line n1
  // line n2
  default -> "It's something else";
});
Which are true?
A) Compilation fails at line n1
B) The code runs and prints It's something else
C) Adding at line n2
   case 2,4,6,8 -> "Even < 10";
   gives the output Even < 10
D) Adding at line n2
   case 2|4|6|8 -> "Even < 10";
   gives the output Even < 10
E) Adding at line n2
   case 2 -> case 4 -> case 6 -> case 8 -> "Even < 10";
   gives the output Even < 10

Q) Given:
class MyException extends Exception {}
and:
static void mightBreak() throws IOException, FileNotFoundException, SQLException {}
and:
  void caller() throws Throwable {
    try {
      mightBreak();
    }
    catch (IOException e) {}
    // line n1
  }
What can be added at line n1?
A) catch (IOException e) {}
B) catch (FileNotFoundException e) {}
C) catch (SQLException e) {}
D) catch (Exception e) {}
E) catch (MyException e) {}

Q) Given:
class AC implements AutoCloseable {
  private String name;
  public AC(String name) { this.name = name; }
  @Override public void close() {
    System.out.print("Closing " + name);
  }
}
And:
  var ac0 = new AC("zero");
  try (
      var ac1 = new AC("one");
      var ac2 = new AC("two");
      ac0;
  ) {
  }
}
What is the result?
A) Compilation fails
B) Closing zeroClosing twoClosing one
C) Closing zeroClosing oneClosing two
D) Closing twoClosing oneClosing zero
E) Closing oneClosing twoClosing zero

Q) Given:
    try (
        var fr = new FileReader("main.txt"); // line n1
        var br = new BufferedReader(fr);     // line n2
        ){
      if (!br.ready()) {
        br = new BufferedReader(new FileReader("backup.txt")); // line n3
      }
      String line;
      while ((line = br.readLine()) != null)
        System.out.println(">> " + line);
    }
  }

What is the result?
A) Compilation fails at line n1
B) Compilation fails at line n2
C) Compilation fails at line n3
D) If main.txt is readable, its contents are shown,
   but if not, the contents of backup.txt are shown
E) If main.txt is readable, its contents are shown
   but if not, the program exits with an unhandled exception

Q)
Given
class AC4 implements AutoCloseable {
  @Override
  public void close() throws Exception {
    throw new SQLException();
  }
}
And:
    try (
        var one = new AC4();
        var two = new AC4();
    ){
      throw new FileNotFoundException();
    }
Which are true?
A) Compilation fails
B) A FileNotFoundException is thrown to the caller
C) An SQLException is thrown to the caller
D) close methods of resources "one" and "two" are called
E) close methods of resources "one" and "two" are not both called

Q) Given:
enum Day { // cannot subtype this, implicitly extends java.lang.Enum
  MONDAY(1), TUESDAY{ /* this is a subtype, override stuff here? */ };
  public Day(int d) {}
  public Day() {} // NOPE, must be private, either explicitly or implicitly
}
and:
sout(Day.MONDAY)

What is the result?
A) 1
B) MONDAY
C) Day.MONDAY
D) Exception at runtime
E) Compilation fails

Q) Given
enum X {
  A, B;
  // line n1
}
Which can be added at line n1?
A) @Override public String toString() { return name().toUpperCase(); }
B) public String toString() { return name().toUpperCase(); }
C) public String name() { return super.name().toUpperCase(); }
D) public static String name(X x) { return x.name().toUpperCase(); }
E) none of the above

Q)
public void doStuff() {
  int len = 3;
  Predicate<String> ps = new Predicate<String>() {
    @Override
    public boolean test(String s) {
      return s.length() > len; // line n1
    }
  };
  // line n2
}
Which are true?
A) The code compiles
B) Compilation fails due to a problem at line n1
C) adding the code
   System.out.println("testing lines " + (++len));
   at line n2 is OK

Q)
Given:
class Outer1 {
  class Inner1 {
    private int y = 100;
    // line n1
  }
  private int x = 99;
  // line n2
}
and these method proposals:
void showX() { sop("x is " + x); }
void showY() { sop("y is " + y); }
void showAnotherY(Inner1 another) { sop("y is " + another.y); }
static Inner1 makeOne() { return new Inner1(); }

Which is/are true?
A) showX can be added at line n1
B) showY can be added at line n2
C) showAnotherY can be added at line n2
D) makeOne can be added at line n1
E) makeOne can be added at line n2

Q) Given:
record Client(String name, int creditLimit) {
  // line n1
}
A) At line n1
   public Client(String name) {
     this(name, 0);
   }
B) at line n1
   public Client(String name, int creditLimit) {
     super();
     this.name = name;
     this.creditLimit = creditLimit;
   }
C) as a separate declaration:
   record SpecialClient(String name, int creditLimit, String greeting
     extends Client(name, creditLimit) {}
D) at line n1
   private Client() {
     this("Unknown", 0);
   }
E) at line n1
   Client {}

Q)
Given:
  class Base {
    void doBaseStuff() { System.out.println("doBaseStuff"); }
  }

  class Sub extends Base {
    void doBaseStuff() { System.out.println("doSubStuff"); }
  }

In the Base and Sub classes, which are true in isolation?

A) doBaseStuff in Base can be marked throws Exception without causing errors
B) doBaseStuff in Base can be marked throws RuntimeException without causing errors
C) doBaseStuff in Sub can be marked throws Exception without causing errors
D) doBaseStuff in Sub can be marked throws RuntimeException without causing errors
E) if doBaseStuff in Base were marked throws Exception,
   then doBaseStuff in Sub can be marked throws IOException without causing errors

Q) Given
public int getValue() {return 1;}
public CharSequence getText() {return null;}

which of these methods may individually be added to a subclass of this class?

// NO, oddly, covariance in returns is NOT FOR PRIMITIVE
-A) public short getValue() {return 1;}

A) public int getValue(int x) {return 1;}
B) public String getValue() {return "Hello";}
C) public String getValue(int x) {return "Hello";}
D) public StringBuilder getText() { return null; }
E) public Object getText() { return ""; }

Q) Given:
interface Int1 {
  default void doStuff() {
    System.out.println("Int1.doStuff()");
  }
}
class Cl1 implements Int1 {
  void doStuff() {
    System.out.println("Cl1.doStuff");
  }
}
What is the result of a call:
new Cl1().doStuff();

A) Compilation fails
B) RuntimeException
C) Int1.doStuff()
D) Cl1.doStuff()
E) Int1.doStuff()
   Cl1.doStuff()

Q)
Given:
interface IntX {
  default void doStuff() {
    System.out.println("IntX.doStuff()");
  }
}
interface IntY {
  default void doStuff() {
    System.out.println("IntY.doStuff()");
  }
}
class ClQ implements IntX, IntY {}
What is the result of a call:
    new ClQ().doStuff();
A) Compilation fails
B) RuntimeException
C) IntX.doStuff()
D) IntY.doStuff()
E) C1QdoStuff()

Q)
class Parent {
  Parent(int x) { y += x; out.print(", P-c: y is " + y); }
  static { out.print(", P-si: x is " + Parent.x); }
  static int x = 99;
  int y = 100;
  { y++; out.print(", P-i: y is " + y); }
}
class Child extends Parent {
  int x = 200;
  static int y = 300;
  Child() { super(x); } // imagine instead super(10)
  Child(int x) { this(); }
  { out.print(", C-i x: is " + x); }
  static { out.print(", C-si: y is " + y); }
}
class InitOrder3 {
  public static void main(String[] args) {
    out.print("Hello!");
    new Child(-1);
    out.println(" Goodbye!");
  }
}
What is the result?
A) Compilation fails
B) Exception at runtime
C) Hello!, P-si: x is 0, C-si: y is 300, P-i: y is 101, P-c: y is 401, C-i x: is 200 Goodbye!
D) , P-si: x is 0, C-si: y is 300Hello!, P-i: y is 101, P-c: y is 401, C-i x: is 200 Goodbye!
E) Hello!, P-si: x is 99, C-si: y is 300, P-i: y is 101, P-c: y is 100Goodbye!

Q) Given:
  interface StudentCriterion {
    boolean test(Student s);
  }

and:
  class Student {
    public int getGpa() { return 0; }
    public List<String> getCourses() { return null; }
  }

Which are legal (individually):
A) StudentCriterion sc = Student s -> { return s.getGpa() > 3;};
B) StudentCriterion sc = s -> { s.getGpa() > 3 };
C) Object sc = s -> {return s.getGpa() > 3;};
D) StudentCriterion sc = (s) -> s.getGpa() > 3;
E) StudentCriterion sc = s -> s.getCourses().size();

Q)   Which are legal individually:
A) Function<String, String> fss = s -> { System.out.println(s); };
B) Consumer<String> cs = s -> { System.out.println(s); };
C) Supplier<String> ss = (s1, s2) -> s1 + s2;
D) BiPredicate<String> bps = (String s) -> { return s.length() > 0; };
E) ToIntFunction<String> tofs = s -> s.length();

Q)   Which are correct declarations?
A) Comparator<String> cs = s1, s2 -> s2.compareTo(s1);
B) Comparator<String> cs = (s1, s2) -> s2.compareTo(s1);
C) Comparator<String> cs = (var s1, String s2) -> s2.compareTo(s1);
D) Comparator<String> cs = (var s1, s2) -> s2.compareTo(s1);
E) Comparator<String> cs = (String s1, String s2) -> s2.compareTo(s1);

Q) Given:
   ???? (s, t) -> s.length() - t.length();

Which are correct inserted in place of ????
A) BiFunction<String, String, Integer> f =
B) BiPredicate<String> f =
C) Comparator<String> f =
D) Supplier<String, Integer> f =
E) BinaryOperator<String> f =

Q) Given these methods exist
  void doStuff(int x, int y) {}         // Method A
  void doStuff(int x, long y) {}        // Method B
  void doStuff(long x, int y) {}        // Method C
  void doStuff(int ... x) {}            // Method D
  void doStuff(Integer x, Integer y) {} // Method E

Given all five methods exist, which is invoked by the invocation
    doStuff(1, 2);
?

What happens if method A is deleted?
A) Method B is invoked
B) Method C is invoked
C) Method D is invoked
D) Method E is invoked
E) Compilation fails
